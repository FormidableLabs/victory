name: Deploy Website

on:
  push:
    paths:
      - 'docs/**'
      - 'website/**'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'website/**'

jobs:
  deploy-website:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: AWS CLI version
        run: "aws --version"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('website/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./website

      - name: Build the website
        run: yarn build
        working-directory: ./website

      - name: Deploy docs (staging)
        if: github.ref != 'refs/heads/main'
        # TODO: UNDO THIS DEBUGGING STUFF
        run: |
          echo FORMIDEPLOY_GIT_SHA ${{ github.event.pull_request.head.sha }}
          echo FORMIDEPLOY_PULL_REQUEST $FORMIDEPLOY_PULL_REQUEST
          echo GITHUB_REF $GITHUB_REF
          echo GITHUB_EVENT_PATH $GITHUB_EVENT_PATH
          echo EXTRACTED GITHUB_EVENT_PATH $(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo
          yarn deploy:stage
        working-directory: ./website
        env:
          # GH actions have a PR merge commit that _isn't_ our actual commits.
          # Manually infer correct branch and sha for pull requests.
          FORMIDEPLOY_GIT_SHA: ${{ github.event.pull_request.head.sha }}
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Deploy docs (production)
        if: github.ref == 'refs/heads/main'
        run: yarn deploy:prod
        working-directory: ./website
        env:
          GITHUB_DEPLOYMENT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}